class HttpClient{constructor(t={}){this._baseURL=t.baseURL||"",this._headers=t.headers||{}}async _fetchJSON(t,e={}){t=await fetch(this._baseURL+t,{...e,headers:this._headers});if(!t.ok)throw new Error(t.statusText);if(!1!==e.parseResponse&&204!==t.status)return t.json()}set prop(t){this.__prop__=t}get prop(){return this.__prop__}setHeader(t,e){return this._headers[t]=e,this}getHeader(t){return this._headers[t]}setBasicAuth(t,e){return this._headers.Authorization="Basic "+btoa(t+":"+e),this}setBearerAuth(t){return this._headers.Authorization="Bearer "+t,this}get(t,e={}){return t=t||this._baseURL,this._fetchJSON(t,{...e,method:"GET"})}post(t,e,s={}){return t=t||this._baseURL,this._fetchJSON(t,{...s,body:e?JSON.stringify(e):void 0,method:"POST"})}put(t,e,s={}){return this._fetchJSON(t,{...s,body:e?JSON.stringify(e):void 0,method:"PUT"})}patch(t,e,s={}){return this._fetchJSON(t,{parseResponse:!1,...s,body:JSON.stringify(e),method:"PATCH"})}delete(t,e={}){return this._fetchJSON(t,{parseResponse:!1,...e,method:"DELETE"})}getQueryString(e={}){return e?"?"+Object.keys(e).map(t=>t+"="+e[t]).join("&"):""}getBody(t={}){return t?{body:JSON.stringify(t)}:{body:JSON.stringify({})}}}